package common;

import java.io.IOException;
import java.io.InputStream;
import java.nio.IntBuffer;

import android.content.Context;
import android.opengl.GLES20;
import android.util.Log;

/**
 * A GLES20 implementation of a shader utility class to compile, link shaders
 * 
 * @author anilsson
 *
 */
public class ShaderHelper extends GLES20 {		
	public static void compileAndLinkShaders(Context context, int program, String uriFragmentShader, String uriVertexShader){
        glAttachShader(program, compileShader(context, GL_VERTEX_SHADER, uriVertexShader));
        glAttachShader(program, compileShader(context, GL_FRAGMENT_SHADER, uriFragmentShader));
        glLinkProgram(program);		
	}	
	
    public static int compileShader(Context context, int type, String uri) {  
        try {
            return compileShader(type, context.getAssets().open(uri));
        } catch (IOException e) {
            Log.e("IO", e.getMessage(), e);
            return 0;
        }       
    }
    
    public static int compileShader(int type, InputStream in) {
        return compileShader(type, GeneralUtil.inputStreamToString(in));
    }    
    
    /**
     * Compiles a shader and returns it opengl ID
     * 
     * @param type The type of shader to compile
     * @param shaderCode The string containing the shader code
     * @return the id generated by the  OpenGL API
     */
    public static int compileShader(int type, String shaderCode) {       
    	
    	int id = glCreateShader(type);				
    	glShaderSource(id, shaderCode);
		glCompileShader(id);
		
		IntBuffer compileStatus = IntBuffer.allocate(2);
		glGetShaderiv(id, GL_COMPILE_STATUS, compileStatus);

		if (compileStatus.get(0) == 0) {
			Log.e("OPENGL", glGetShaderInfoLog(id));
			String typeOfShader = "<incorrect shader type>";
			switch (type) {
			case GL_FRAGMENT_SHADER:
				typeOfShader = "fragment";
				break;
			case GL_VERTEX_SHADER:
				typeOfShader = "vertex";
				break;
			default:
			}
			Log.i("OPENGL", "Could not compile: " + typeOfShader + " shader");
		}

        return id;
    }
}
