package com.enighma.testopengl;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.IntBuffer;

import android.content.res.AssetManager;
import android.opengl.GLES20;
import android.util.Log;

/**
 * A GLES20 implementation of a shader utility class to compile, link shaders
 * 
 * @author anilsson
 *
 */
public class ShaderUtil {
    public static String inputStreamToString(InputStream in){
        StringBuilder sb = new StringBuilder();        
        InputStreamReader reader = new InputStreamReader(in);
        try {            
            int c; 
            while((c = reader.read()) > -1) sb.append((char)c);                        
        } catch (IOException e) {
            Log.e("IO", e.getMessage(), e);
        }        
        return sb.toString();
    }
    
    
    public static int compileShader(int type, InputStream in) {
        return compileShader(type, inputStreamToString(in));
    }
    
    public static int compileShader(int type, AssetManager manager, String uri) {  
        try {
            return compileShader(type, manager.open(uri));
        } catch (IOException e) {
            Log.e("IO", e.getMessage(), e);
            return 0;
        }
    }
    
    
    /**
     * Compiles a shader and returns it opengl ID
     * 
     * @param type The type of shader to compile
     * @param shaderCode The string containing the shader code
     * @return the id generated by the  OpenGL API
     */
    public static int compileShader(int type, String shaderCode) {       
        int shaderID = GLES20.glCreateShader(type); 
        IntBuffer compileStatus = IntBuffer.allocate(2);

        if(shaderID > 0){
            GLES20.glShaderSource(shaderID, shaderCode);
            GLES20.glCompileShader(shaderID);              
            GLES20.glGetShaderiv(shaderID, GLES20.GL_COMPILE_STATUS, compileStatus);
            
            if(compileStatus.get(0) == 0){
                Log.e("OPENGL", GLES20.glGetShaderInfoLog(shaderID));
            }
            

        }else{
            Log.i("OPENGL", "Could not create shader");
        }
        
        return shaderID;
    }

}
